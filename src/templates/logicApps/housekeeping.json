{  
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Name of the Logic App"
      }
    },
    "apiConnectionName": {
      "type": "string",
      "metadata": {
        "description": "Name of the API Connection to use"
      }
    },
    "retention": {
      "type": "int",
      "defaultValue": -30
    },
    "location": {
      "type": "string"
    },
    "tags": {
      "type": "object"
    },
    "backupEnabled": {
        "type": "bool"
    }
  },
  "variables": {

    "location": "[parameters('location')]",

    "name": {
      "connection": "[parameters('apiConnectionName')]",
      "logicApp": "[parameters('name')]"
    },

    "storageAccount": {
      "retention": "[parameters('retention')]"
    },

    "tags": "[parameters('tags')]",

    "apiVersions": {
      "logicApp": "2017-07-01",
      "connections": "2016-06-01"
    }
  },
  "resources": [
    {
      "comments": "Logic App to remove old backups from Blob Storage",
      "type": "Microsoft.Logic/workflows",
      "name": "[variables('name').logicApp]",
      "condition": "[parameters('backupEnabled')]",
      "apiVersion": "[variables('apiVersions').logicApp]",
      "location": "[variables('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "state": "Enabled",
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
              "$connections": {
                "defaultValue": {},
                "type": "Object"
              },
              "retention": {
                "type": "int"
              }
          },
          "triggers": {
              "Recurrence": {
                  "recurrence": {
                      "frequency": "Day",
                      "interval": 1
                  },
                  "type": "Recurrence"
              }
          },
          "actions": {
              "For_each": {
                  "foreach": "@body('List_blobs')?['value']",
                  "actions": {
                      "Condition": {
                          "actions": {
                              "Delete_blob": {
                                  "runAfter": {},
                                  "type": "ApiConnection",
                                  "inputs": {
                                      "host": {
                                          "connection": {
                                              "name": "@parameters('$connections')['azureblob']['connectionId']"
                                          }
                                      },
                                      "method": "delete",
                                      "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(items('For_each')?['Id']))}"
                                  },
                                  "description": "If blob is older than the expiration age, delete it"
                              }
                          },
                          "runAfter": {},
                          "expression": "@less(ticks(items('For_each')?['LastModified']), ticks(addDays(utcnow(), variables('ExpirationAgeInDays'))))",
                          "type": "If",
                          "description": "Check LastModified timestamp and whether older than the expiration age variable"
                      }
                  },
                  "runAfter": {
                      "List_blobs": [
                          "Succeeded"
                      ]
                  },
                  "type": "Foreach",
                  "description": "Scan all blobs in this folder"
              },
              "List_blobs": {
                  "runAfter": {
                      "Set_expiration_age_variable_": [
                          "Succeeded"
                      ]
                  },
                  "type": "ApiConnection",
                  "inputs": {
                      "host": {
                          "connection": {
                              "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                      },
                      "method": "get",
                      "path": "/datasets/default/foldersV2/@{encodeURIComponent(encodeURIComponent('backup'))}",
                      "queries": {
                          "useFlatListing": true
                      }
                  },
                  "runtimeConfiguration": {
                      "paginationPolicy": {
                          "minimumItemCount": 5000
                      }
                  }
              },
              "Set_expiration_age_variable_": {
                  "runAfter": {},
                  "type": "InitializeVariable",
                  "inputs": {
                      "variables": [
                          {
                              "name": "ExpirationAgeInDays",
                              "type": "Integer",
                              "value": "@parameters('retention')"
                          }
                      ]
                  },
                  "description": "A variable to configure the auto expiration age in days. Configured in negative number. Default is -30 (30 days old)."
              }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "connectionId": "[resourceId('Microsoft.Web/connections', variables('name').connection)]",
                "connectionName": "StorageAccountConnection",
                "id": "[reference(concat('Microsoft.Web/connections/', variables('name').connection), variables('apiVersions').connections).api.id]"
              }
            }
          },
          "retention": {
            "value": "[variables('storageAccount').retention]"
          }
        }
      }
    }
    
  ],
  "outputs": {
    
  }
}