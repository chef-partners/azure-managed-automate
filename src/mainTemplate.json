{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "prefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix to be applied to the name and hostname of the Chef and Automate servers"
            }
        },
        "customerResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "Name of the resource group that contains the Virtual network to which the Chef and Automate servers should be connected to"
            }
        },
        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network which contains the Subnet to which the machines should be connected"
            }
        },
        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet to which the machines should be connected to"
            }
        },
        "uniqueShort": {
            "type": "string",
            "metadata": {
                "description": "A string of 4 or 5 characters that will be used to help uniquely identify the resources that are created. If this is not specified then a value will be automatically created."
            },
            "defaultValue": ""
        },
        "sshSourceAddresses": {
            "type": "array",
            "metadata": {
                "description": "Source ranges from which SSH access is permitted."
            },
            "defaultValue": [
                "34.206.89.3/32"
            ]
        },
        "chefServerVersion": {
            "type": "string",
            "metadata": {
                "description": "Version of the Chef Server to download and install"
            },
            "defaultValue": "12.17.33"
        },
        "chefUsername": {
            "type": "string",
            "metadata": {
                "description": "Username when creating the Chef user"
            }
        },
        "chefUserFullname": {
            "type": "string",
            "metadata": {
                "description": "Ful name of the Chef user"
            }
        },
        "chefUserPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password to be associated with the Chef user"
            }
        },
        "chefUserEmailaddress": {
            "type": "string",
            "metadata": {
                "description": "Email address associated with the chef user"
            }
        },
        "chefOrg": {
            "type": "string",
            "metadata": {
                "description": "Org that should be created and the user associated with"
            }
        },
        "chefOrgDescription": {
            "type": "string",
            "metadata": {
                "description": "Description of the Chef org"
            }
        },
        "automateLicence": {
            "type": "securestring"
        },
        "enableLogAnalytics": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "State if Log Analytics should be configured for the cluster"
            }
        },
        "enableBackup": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "State if backup should be configured on the machine."
            }
        },
        "backupHour": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "UTC Hour at which backup will run"
            }
        },
        "backupMinute": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Minute of the specified hour that the backup will run"
            }
        },
        "logAnalyticsTier": {
            "type": "string"
        },
        "logAnalyticsLocation": {
            "type": "string",
            "defaultValue": "eastus"
        },
        "baseUrl": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/chef-partners/azure-managed-automate/release/src"
        },
        "azureStorageSASToken": {
            "type": "string",
            "metadata": {
                "description": "SAS token that has been generated if the templates are to be read from azure table storage"
            },
            "defaultValue": ""
        },
        "sshPublicKeys": {
            "type": "array",
            "metadata": {
                "description": "SSH public keys that should be applied to the user on the machines"
            },
            "defaultValue": [
                "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDP2kmdeomWaf4jzSEx2TmW43tTkWYJafn5jj6qN9cMkgY5tFhLu2vmTlzeLL7m9A7rmR6Dn8kYFmpvnHy/nT3dZfmkIJbVBr4aQjPdhYC95+8VTR1gPQjQRrm/VbQoaTle4dHRPPMjM0/w9hXD+yelLQl6Npk6rE+N/+4ykDdKBFY+LYFsz68tjOjaEIkGJHZ2A8tDJNKA9BOXVB9hwWKBA4slzaoti5/EgTP0ToFlTn2+WtPWkkcSWZFjPJpenHfLHKZY38PrYrK1yoQlELAihv+6+Gkg4m0QwhbpQz6thG6PVdBMF6dXKCO8HoMusSMSoN/Q21aQHQh9pJ2q9fUF automate-azure"
            ]
        },
        "debug": {
            "type": "bool",
            "metadata": {
                "description": "Allow extra output from the template. This should not be used in production"
            },
            "defaultValue": false
        }
    },
    "variables": {
        "unique": "[uniqueString(subscription().subscriptionId, resourceGroup().id, deployment().name, parameters('prefix'))]",
        "uniqueShort": "[if(empty(parameters('uniqueShort')), substring(variables('unique'), 0, 4), parameters('uniqueShort'))]",
        "baseUrl": "[if(not(empty(parameters('baseUrl'))), if(endsWith(parameters('baseUrl'), '/'), parameters('baseUrl'), concat(parameters('baseUrl'), '/')), if(contains(deployment().properties, 'templateLink'), uri(deployment().properties.templateLink.uri, '.'), ''))]",
        "location": "[resourceGroup().location]",
        "logAnalyticsLocation": "[if(empty(parameters('logAnalyticsLocation')), variables('location'), parameters('logAnalyticsLocation'))]",
        "name": {
            "storageAccount": "[variables('unique')]",
            "container": {
                "backup": "backup"
            },
            "virtualNetwork": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-VNet')]",
            "appServicePlan": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-AppServicePlan')]",
            "appService": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-AppService')]",
            "sa": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-SA')]",
            "la": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-LogAnalytics')]",
            "vm": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-VM')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-VM')]"
            },
            "computer": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'))]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'))]"
            },
            "publicIPAddress": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-PublicIP')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-PublicIP')]"
            },
            "nic": {
                "customer": {
                    "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-Customer-VNet-NIC')]",
                    "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-Customer-VNet-NIC')]"
                }
            },
            "nsg": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-Customer-NSG')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-Customer-NSG')]"
            },
            "resourceGroup": "[parameters('customerResourceGroupName')]",
            "extension": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-ScriptExtension')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-ScriptExtension')]"
            },
            "laExtension": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-LAExtension')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-LAExtension')]"
            },
            "functions": {
                "configstore": "[concat(parameters('prefix'), '-ConfigStore-AF')]",
                "automatelog": "[concat(parameters('prefix'), '-AutomateLog-AF')]",
                "nodecount": "[concat(parameters('prefix'), '-NodeCount-AF')]",
                "starterkit": "[concat(parameters('prefix'), '-StarterKit-AF')]"
            }
        },
        "enabled": {
            "logAnalytics": "[parameters('enableLogAnalytics')]",
            "backup": "[parameters('enableBackup')]",
            "debug": "[parameters('debug')]"
        },
        "backup": {
            "cron": "[concat(parameters('backupMinute'), ' ', parameters('backupHour'), ' * * *')]"
        },
        "vmSize": {
            "chef": "Standard_DS2_V2",
            "automate": "Standard_DS2_V2"
        },
        "admin": {
            "username": "azureama",
            "copy": [
                {
                    "name": "sshPublicKeys",
                    "count": "[length(parameters('sshPublicKeys'))]",
                    "input": {
                        "path": "[concat('/home/', variables('admin').username, '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('sshPublicKeys')[copyIndex('sshPublicKeys')]]"
                    }
                }
            ]
        },
        "customerVNetID": "[resourceId(parameters('customerResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
        "customerSubnetRef": "[concat(variables('customerVNetID'), '/subnets/', parameters('subnetName'))]",
        "sourceAddresses": {
            "ssh": "[parameters('sshSourceAddresses')]"
        },
        "sasTokenFromDeployment": "[if(contains(deployment().properties, 'templateLink'), if(equals(length(split(deployment().properties.templateLink.uri, '?')), 2), last(split(deployment().properties.templateLink.uri, '?')), ''), '')]",
        "templateUrlQueryString": "[if(empty(parameters('azureStorageSASToken')), if(empty(variables('sasTokenFromDeployment')), '', concat('?', variables('sasTokenFromDeployment'))), concat('?', parameters('azureStorageSASToken')))]",
        "urls": {
            "storageAccount": "[concat(variables('baseUrl'), 'templates/storage-account.json', variables('templateUrlQueryString'))]",
            "virtualNetwork": "[concat(variables('baseUrl'), 'templates/virtual-network.json', variables('templateUrlQueryString'))]",
            "publicIPAddress": "[concat(variables('baseUrl'), 'templates/public-ipaddress.json', variables('templateUrlQueryString'))]",
            "networkInterfacePublic": "[concat(variables('baseUrl'), 'templates/network-interface-public.json', variables('templateUrlQueryString'))]",
            "networkSecurityGroup": "[concat(variables('baseUrl'), 'templates/network-security-group.json', variables('templateUrlQueryString'))]",
            "virtualMachine": "[concat(variables('baseUrl'), 'templates/virtual-machine.json', variables('templateUrlQueryString'))]",
            "scriptExtension": "[concat(variables('baseUrl'), 'templates/script-extension.json', variables('templateUrlQueryString'))]",
            "appServicePlan": "[concat(variables('baseUrl'), 'templates/app-service-plan.json', variables('templateUrlQueryString'))]",
            "appService": "[concat(variables('baseUrl'), 'templates/app-service.json', variables('templateUrlQueryString'))]",
            "logAnalytics": "[concat(variables('baseUrl'), 'templates/log-analytics.json', variables('templateUrlQueryString'))]",
            "logAnalyticsExtension": "[concat(variables('baseUrl'), 'templates/log-analytics-extension.json', variables('templateUrlQueryString'))]",
            "scripts": {
                "chefserver": "[concat(variables('baseUrl'), 'scripts/chef-server.sh', variables('templateUrlQueryString'))]",
                "automateserver": "[concat(variables('baseUrl'), 'scripts/automate-server.sh', variables('templateUrlQueryString'))]",
                "backup": "[concat(variables('baseUrl'), 'scripts/backup.sh', variables('templateUrlQueryString'))]"
            },
            "functions": {
                "configStore": "[concat(variables('baseUrl'), 'templates/functions/config-store.json', variables('templateUrlQueryString'))]",
                "automateLog": "[concat(variables('baseUrl'), 'templates/functions/automate-log.json', variables('templateUrlQueryString'))]",
                "nodeCount": "[concat(variables('baseUrl'), 'templates/functions/node-count.json', variables('templateUrlQueryString'))]",
                "starterKit": "[concat(variables('baseUrl'), 'templates/functions/starter-kit.json', variables('templateUrlQueryString'))]"
            }
        },
        "apiVersions": {
            "deployments": "2017-05-10",
            "config": "2016-08-01"
        },
        "chef": {
            "version": "[parameters('chefServerVersion')]",
            "username": "[parameters('chefUsername')]",
            "email": "[parameters('chefUserEmailaddress')]",
            "fullname": "[parameters('chefUserFullname')]",
            "password": "[parameters('chefUserPassword')]",
            "org": "[toLower(parameters('chefOrg'))]",
            "orgDescription": "[parameters('chefOrgDescription')]"
        },
        "automate": {
            "licence": "[parameters('automateLicence')]"
        },
        "la": {
            "sku": "[parameters('logAnalyticsTier')]"
        },
        "singlequote": "'"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').sa, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').storageAccount]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('name').storageAccount]"
                    },
                    "tags": {
                        "value": {
                            "description": "Storage account used for troubleshooting and function storage",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').appServicePlan, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').appServicePlan]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "name": {
                        "value": "[variables('name').appServicePlan]"
                    },
                    "tags": {
                        "value": {
                            "description": "Service plan to host functions for setup and logging",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').appService, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').appServicePlan, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').appService]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "name": {
                        "value": "[variables('name').appService]"
                    },
                    "tags": {
                        "value": {
                            "description": "Website app service to store the various functions required for the Chef Managed App",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    },
                    "servicePlanId": {
                        "value": "[reference(concat(variables('name').appServicePlan, '-Deployment')).outputs.id.value]"
                    },
                    "storageAccountName": {
                        "value": "[variables('name').storageAccount]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').functions.configstore, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').appService, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').functions.configStore]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "siteName": {
                        "value": "[variables('name').appService]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').functions.starterkit, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').appService, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').functions.starterKit]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "siteName": {
                        "value": "[variables('name').appService]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').functions.automatelog, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').appService, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').functions.automateLog]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "siteName": {
                        "value": "[variables('name').appService]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.workspaceId.value]"
                    },
                    "logAnalyticsSharedKey": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.key.value]"
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').functions.nodecount, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').appService, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').functions.nodeCount]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "siteName": {
                        "value": "[variables('name').appService]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.workspaceId.value]"
                    },
                    "logAnalyticsSharedKey": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.key.value]"
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').la, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').logAnalytics]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[variables('name').la]"
                    },
                    "sku": {
                        "value": "[variables('la').sku]"
                    },
                    "location": {
                        "value": "[variables('logAnalyticsLocation')]"
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    },
                    "tags": {
                        "value": {
                            "description": "Log Analytics workspace to capture information about the health of the Chef Automate Managed App",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').nsg.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').networkSecurityGroup]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "groupName": {
                        "value": "[variables('name').nsg.chef]"
                    },
                    "sshSourceAddresses": {
                        "value": "[variables('sourceAddresses').ssh]"
                    },
                    "tags": {
                        "value": {
                            "description": "network security group limiting access to the Chef server",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').nsg.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').networkSecurityGroup]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "groupName": {
                        "value": "[variables('name').nsg.automate]"
                    },
                    "sshSourceAddresses": {
                        "value": "[variables('sourceAddresses').ssh]"
                    },
                    "tags": {
                        "value": {
                            "description": "network security group limiting access to the Automate server",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').publicIPAddress.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').publicIPAddress]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "publicIPAddressName": {
                        "value": "[variables('name').publicIPAddress.chef]"
                    },
                    "publicIPAddressType": {
                        "value": "Dynamic"
                    },
                    "dnsLabelPrefix": {
                        "value": "[variables('name').computer.chef]"
                    },
                    "tags": {
                        "value": {
                            "description": "Public IP address for the Chef server",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').publicIPAddress.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').publicIPAddress]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "publicIPAddressName": {
                        "value": "[variables('name').publicIPAddress.automate]"
                    },
                    "publicIPAddressType": {
                        "value": "Dynamic"
                    },
                    "dnsLabelPrefix": {
                        "value": "[variables('name').computer.automate]"
                    },
                    "tags": {
                        "value": {
                            "description": "Public IP address for the Automate server",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').nic.customer.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').publicIPAddress.chef, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').nsg.chef, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').networkInterfacePublic]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "nicName": {
                        "value": "[variables('name').nic.customer.chef]"
                    },
                    "publicIPAddressRef": {
                        "value": "[reference(concat(variables('name').publicIPAddress.chef, '-Deployment')).outputs.publicIpId.value]"
                    },
                    "subnetRef": {
                        "value": "[variables('customerSubnetRef')]"
                    },
                    "nsgRef": {
                        "value": "[reference(concat(variables('name').nsg.chef, '-Deployment')).outputs.nsgId.value]"
                    },
                    "tags": {
                        "value": {
                            "description": "Network card for the Chef server connected to the customer subnet",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').nic.customer.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').publicIPAddress.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').nsg.automate, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').networkInterfacePublic]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "nicName": {
                        "value": "[variables('name').nic.customer.automate]"
                    },
                    "publicIPAddressRef": {
                        "value": "[reference(concat(variables('name').publicIPAddress.automate, '-Deployment')).outputs.publicIpId.value]"
                    },
                    "subnetRef": {
                        "value": "[variables('customerSubnetRef')]"
                    },
                    "nsgRef": {
                        "value": "[reference(concat(variables('name').nsg.automate, '-Deployment')).outputs.nsgId.value]"
                    },
                    "tags": {
                        "value": {
                            "description": "Network card for the Automate server connected to the customer subnet",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').vm.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').nic.customer.chef, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').virtualMachine]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmName": {
                        "value": "[variables('name').vm.chef]"
                    },
                    "computerName": {
                        "value": "[variables('name').computer.chef]"
                    },
                    "vmSize": {
                        "value": "[variables('vmSize').chef]"
                    },
                    "adminUsername": {
                        "value": "[variables('admin').username]"
                    },
                    "sshPublicKeys": {
                        "value": "[variables('admin').sshPublicKeys]"
                    },
                    "authenticationType": {
                        "value": "sshPublicKey"
                    },
                    "storageAccountName": {
                        "value": "[variables('name').storageAccount]"
                    },
                    "customerNicRef": {
                        "value": "[reference(concat(variables('name').nic.customer.chef, '-Deployment')).outputs.ref.value]"
                    },
                    "fqdn": {
                        "value": "[reference(concat(variables('name').publicIPAddress.chef, '-Deployment')).outputs.fqdn.value]"
                    },
                    "tags": {
                        "value": {
                            "description": "Chef Server Virtual Machine",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').vm.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').nic.customer.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').virtualMachine]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vmName": {
                        "value": "[variables('name').vm.automate]"
                    },
                    "computerName": {
                        "value": "[variables('name').computer.automate]"
                    },
                    "vmSize": {
                        "value": "[variables('vmSize').automate]"
                    },
                    "adminUsername": {
                        "value": "[variables('admin').username]"
                    },
                    "sshPublicKeys": {
                        "value": "[variables('admin').sshPublicKeys]"
                    },
                    "authenticationType": {
                        "value": "sshPublicKey"
                    },
                    "storageAccountName": {
                        "value": "[variables('name').storageAccount]"
                    },
                    "customerNicRef": {
                        "value": "[reference(concat(variables('name').nic.customer.automate, '-Deployment')).outputs.ref.value]"
                    },
                    "fqdn": {
                        "value": "[reference(concat(variables('name').publicIPAddress.automate, '-Deployment')).outputs.fqdn.value]"
                    },
                    "tags": {
                        "value": {
                            "description": "Automate Server Virtual Machine",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').laExtension.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').vm.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').logAnalyticsExtension]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceId": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.workspaceId.value]"
                    },
                    "workspaceKey": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.key.value]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmname": {
                        "value": "[variables('name').vm.automate]"
                    },
                    "extensionName": {
                        "value": "MonitorAutomateServer"
                    },
                    "tags": {
                        "value": {
                            "description": "Script to install and configure the Automate server",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').laExtension.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').vm.chef, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').logAnalyticsExtension]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceId": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.workspaceId.value]"
                    },
                    "workspaceKey": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.key.value]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmname": {
                        "value": "[variables('name').vm.chef]"
                    },
                    "extensionName": {
                        "value": "MonitorChefServer"
                    },
                    "tags": {
                        "value": {
                            "description": "Log Analytics monitoring extension for Chef Server",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').extension.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').vm.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').functions.configstore, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').laExtension.automate, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').scriptExtension]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmname": {
                        "value": "[variables('name').vm.automate]"
                    },
                    "scriptUrl": {
                        "value": "[variables('urls').scripts.automateserver]"
                    },
                    "scriptName": {
                        "value": "automate-server.sh"
                    },
                    "scriptArguments": {
                        "value": "[concat('-o install,kernel,config,deploy,licence,token,cron', if(variables('enabled').backup, ',backup', ''), ',internalip -u \"', variables('chef').username, '\" -p \"', variables('chef').password, '\" -e ', variables('chef').email, ' -f \"', variables('chef').fullname, '\" -l ', variables('automate').licence, ' -b ', reference(concat(variables('name').appService, '-Deployment')).outputs.baseUrl.value, ' -n ', reference(concat(variables('name').functions.configstore, '-Deployment')).outputs.name.value, ' -k \"', reference(concat(variables('name').functions.configstore, '-Deployment')).outputs.apiKey.value, '\"', if(variables('enabled').logAnalytics, concat(' -N ', reference(concat(variables('name').functions.automatelog, '-Deployment')).outputs.name.value, ' -K \"', reference(concat(variables('name').functions.automatelog, '-Deployment')).outputs.apiKey.value), ''), '\" -F ', reference(concat(variables('name').publicIPAddress.automate, '-Deployment')).outputs.fqdn.value, ' --backupscripturl \"', variables('urls').scripts.backup, '\" --saname ', variables('name').storageAccount, ' --sacontainer ', variables('name').container.backup, ' --sakey \"', reference(concat(variables('name').sa, '-Deployment')).outputs.accesskey.value, '\" --backupcron ', variables('singlequote'), variables('backup').cron, variables('singlequote'))]"
                    },
                    "extensionName": {
                        "value": "InstallAndConfigureAutomate"
                    },
                    "tags": {
                        "value": {
                            "description": "Script to install and configure the Automate server",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').extension.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').vm.chef, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').extension.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').functions.configstore, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').laExtension.chef, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').scriptExtension]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmname": {
                        "value": "[variables('name').vm.chef]"
                    },
                    "scriptUrl": {
                        "value": "[variables('urls').scripts.chefserver]"
                    },
                    "scriptName": {
                        "value": "chef-server.sh"
                    },
                    "scriptArguments": {
                        "value": "[concat('-o install,config,storekeys,integrate,reconfigure,internalip',  if(variables('enabled').backup, ',backup', ''), ' -v ', variables('chef').version, ' -u ', variables('chef').username, ' -f \"', variables('chef').fullname, '\" -p \"', variables('chef').password, '\" -a ', variables('chef').email, ' -O ', variables('chef').org, ' -d \"', variables('chef').orgDescription, '\" -b ', reference(concat(variables('name').appService, '-Deployment')).outputs.baseUrl.value, ' -n ', reference(concat(variables('name').functions.configstore, '-Deployment')).outputs.name.value, ' -k \"', reference(concat(variables('name').functions.configstore, '-Deployment')).outputs.apiKey.value, '\" -F ', reference(concat(variables('name').publicIPAddress.automate, '-Deployment')).outputs.fqdn.value, ' -C ', reference(concat(variables('name').publicIPAddress.chef, '-Deployment')).outputs.fqdn.value, ' --backupscripturl \"', variables('urls').scripts.backup, '\" --saname ', variables('name').storageAccount, ' --sacontainer ', variables('name').container.backup, ' --sakey \"', reference(concat(variables('name').sa, '-Deployment')).outputs.accesskey.value, '\" --backupcron ', variables('singlequote'), variables('backup').cron, variables('singlequote'))]"
                    },
                    "extensionName": {
                        "value": "InstallAndConfigureChef"
                    },
                    "tags": {
                        "value": {
                            "description": "Script to install and configure the Chef server",
                            "provider": "33194f91-eb5f-4110-827a-e95f640a9e46"
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "starterKitDownloadUrl": {
            "type": "string",
            "value": "[concat(reference(concat(variables('name').appService, '-Deployment')).outputs.baseUrl.value, '/', reference(concat(variables('name').functions.starterkit, '-Deployment')).outputs.name.value, '?code=', reference(concat(variables('name').functions.starterkit, '-Deployment')).outputs.apiKey.value)]"
        },
        "functionApiKey": {
            "type": "string",
            "value": "[if(variables('enabled').logAnalytics, reference(concat(variables('name').functions.configstore, '-Deployment')).outputs.apiKey.value, '')]"
        },
        "uniqueShort": {
            "type": "string",
            "value": "[variables('uniqueShort')]"
        },
        "setupCommandAutomate": {
            "type": "string",
            "value": "[if(variables('enabled').debug, reference(concat(variables('name').extension.automate, '-Deployment')).outputs.executedCommand.value, '')]"
        },
        "setupCommandChef": {
            "type": "string",
            "value": "[if(variables('enabled').debug, reference(concat(variables('name').extension.chef, '-Deployment')).outputs.executedCommand.value, '')]"
        }
    }
}