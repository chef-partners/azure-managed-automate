{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "prefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix to be applied to the name and hostname of the Chef and Automate servers"
            }
        },

        "existingVNet": {
            "type": "bool",
            "metadata": {
                "description": "State if an existing VNet and Subnet shoulod be used. If true then `customerResourceGroupName`, `virtualNetworkName` and `subnetName` must be supplied"
            },
            "defaultValue": true
        },

        "customerResourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "Name of the resource group that contains the Virtual network to which the Chef and Automate servers should be connected to"
            },
            "defaultValue": ""
        },

        "virtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Name of the Virtual Network which contains the Subnet to which the machines should be connected"
            },
            "defaultValue": ""
        },

        "subnetName": {
            "type": "string",
            "metadata": {
                "description": "Name of the subnet to which the machines should be connected to"
            },
            "defaultValue": ""
        },

        "uniqueShort": {
            "type": "string",
            "metadata": {
                "description": "A string of 4 or 5 characters that will be used to help uniquely identify the resources that are created. If this is not specified then a value will be automatically created."
            },
            "defaultValue": ""
        },

        "sshSourceAddresses": {
            "type": "array",
            "metadata": {
                "description": "Source ranges from which SSH access is permitted."
            },
            "defaultValue": [
                "34.206.89.3/32"
            ]
        },

        "chefServerVersion": {
            "type": "string",
            "metadata": {
                "description": "Version of the Chef Server to download and install"
            },
            "defaultValue": "12.17.33"
        },

        "chefUsername": {
            "type": "string",
            "metadata": {
                "description": "Username when creating the Chef user"
            }
        },

        "chefUserFullname": {
            "type": "string",
            "metadata": {
                "description": "Ful name of the Chef user"
            }
        },

        "chefUserPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password to be associated with the Chef user"
            }
        },

        "chefUserEmailaddress": {
            "type": "string",
            "metadata": {
                "description": "Email address associated with the Chef user"
            }
        },

        "chefUserGdprAgree": {
            "type": "bool",
            "metadata": {
                "description": "Whether or not the user has agreed to receive emails from Chef."
            },
            "defaultValue": false
        },

        "chefOrg": {
            "type": "string",
            "metadata": {
                "description": "Org that should be created and the user associated with"
            }
        },

        "chefOrgDescription": {
            "type": "string",
            "metadata": {
                "description": "Description of the Chef org"
            }
        },

        "chefEnabled": {
            "type": "bool",
            "metadata": {
                "description": "State if the Chef Server should be deployed or not"
            },
            "defaultValue": true
        },

        "alertEmailAddress": {
            "type": "string",
            "metadata": {
                "description": "If log anlaytics are enabled this is the email address that alerts should be sent to. If blank the chefUserEmailaddress will be used."
            },
            "defaultValue": ""
        },

        "automateLicense": {
            "type": "securestring",
            "defaultValue": ""
        },

        "automateEnabled": {
            "type": "bool",
            "metadata": {
                "description": "State if the Automate Server should be deployed or not"
            },
            "defaultValue": true
        },        

        "customerName": {
            "type": "string",
            "metadata": {
                "description": "Name of the customer using the template"
            },
            "defaultValue": ""
        },

        "location": {
            "type": "string",
            "metadata": {
                "description": "Location that the resources should be deployed to. Defaults to the Resource Group location"
            },
            "defaultValue": "[resourceGroup().location]"
        },

        "enableLogAnalytics": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "State if Log Analytics should be configured for the cluster"
            }
        },

        "enableBackup": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "State if backup should be configured on the machine."
            }
        },

        "autoDiscoverSASToken": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "State if the template should try to auto discover the SAS token from the deployment. This is used when building and testing the template in VSTS."
            }
        },

        "backupHour": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "UTC Hour at which backup will run"
            }
        },

        "backupMinute": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "Minute of the specified hour that the backup will run"
            }
        },

        "backupRetention": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Number of days that Chef backups should be kept for"
            }
        },

        "logAnalyticsTier": {
            "type": "string",
            "defaultValue": "Free"
        },

        "logAnalyticsLocation": {
            "type": "string",
            "defaultValue": "eastus"
        },

        "baseUrl": {
            "type": "string",
            "defaultValue": "https://chefarmstorage.blob.core.windows.net/ama"
        },

        "azureStorageSASToken": {
            "type": "string",
            "metadata": {
                "description": "SAS token that has been generated if the templates are to be read from azure table storage"
            },
            "defaultValue": ""            
        },

        "sshPublicKeys": {
            "type": "array",
            "metadata": {
                "description": "SSH public keys that should be applied to the user on the machines"
            },
            "defaultValue": [
                "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDP2kmdeomWaf4jzSEx2TmW43tTkWYJafn5jj6qN9cMkgY5tFhLu2vmTlzeLL7m9A7rmR6Dn8kYFmpvnHy/nT3dZfmkIJbVBr4aQjPdhYC95+8VTR1gPQjQRrm/VbQoaTle4dHRPPMjM0/w9hXD+yelLQl6Npk6rE+N/+4ykDdKBFY+LYFsz68tjOjaEIkGJHZ2A8tDJNKA9BOXVB9hwWKBA4slzaoti5/EgTP0ToFlTn2+WtPWkkcSWZFjPJpenHfLHKZY38PrYrK1yoQlELAihv+6+Gkg4m0QwhbpQz6thG6PVdBMF6dXKCO8HoMusSMSoN/Q21aQHQh9pJ2q9fUF automate-azure"
            ]
        },

        "debug": {
            "type": "bool",
            "metadata": {
                "description": "Allow extra output from the template. This should not be used in production"
            },
            "defaultValue": false
        },

        "vnetPrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix for the virtual network. Only used when creating a new network for deployment"
            },
            "defaultValue": "10.0.0.0/24"
        },

        "subnetPrefix": {
            "type": "string",
            "metadata": {
                "description": "Prefix for the subnet. Only used when creating a new virtual network"
            },
            "defaultValue": "10.0.0.0/24"
        },

        "existingVNetFromUI": {
            "type": "string",
            "metadata": {
                "description": "The output from the UI does not provide a boolean value, only `new` or `existing`. This parameter will take this value and produce a boolean if it is set. This should not be used for manual template deployments."
            },
            "defaultValue": "",
            "allowedValues": [
                "",
                "new",
                "existing"
            ]
        }, 

        "verifyURL": {
            "type": "string",
            "metadata": {
                "description": "URL for the function that will provide the workspace id and key to enable central logging"
            },
            "defaultValue": "https://whitelist.managedautomate.io/api/automate"
        },

        "verifyURLApiKey": {
            "type": "securestring",
            "defaultValue": ""
        },

        "customDomainName": {
            "type": "string",
            "metadata": {
                "description": "Allows the use of a customer specified domain for the CHef and Automate servers"
            },
            "defaultValue": ""
        },

        "customChefServerHostname": {
            "type": "string",
            "metadata": {
                "description": "If using a custom domain, what is the hostname of the Chef server"
            },
            "defaultValue": ""
        },

        "customChefServerSSLCertificate": {
            "type": "string",
            "metadata": {
                "description": "If using a custom domain, the Base64 encoded certificate for the Chef server"
            },
            "defaultValue": ""
        },

        "customChefServerSSLCertificateKey": {
            "type": "string",
            "metadata": {
                "description": "If using a custom domain, the Base64 encoded associated key for the Chef Server certificate"
            },
            "defaultValue": ""
        },

        "customAutomateServerHostname": {
            "type": "string",
            "metadata": {
                "description": "If using a custom domain, what is the hostname of the Automate server"
            },
            "defaultValue": ""
        },

        "customAutomateServerSSLCertificate": {
            "type": "string",
            "metadata": {
                "description": "If using a custom domain, the Base64 encoded certificate for the Automate server"
            },
            "defaultValue": ""
        },

        "customAutomateServerSSLCertificateKey": {
            "type": "string",
            "metadata": {
                "description": "If using a custom domain, the Base64 encoded associated key for the Automate Server certificate"
            },
            "defaultValue": ""
        },
        
        "sslRenewalHour": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "UTC Hour at which the SSL renewal script will run. Only applicable if running as a Managed App"
            }
        },

        "sslRenewalMinute": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Minute of the specified hour that the SSL renewal script will run. Only applicable if running as a Managed app"
            }
        },

        "alertActionGroups": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Array of actions group IDs that should be set for alert notifications"
            }
        }
    },
    "variables": {

        "unique": "[uniqueString(subscription().subscriptionId, resourceGroup().id, deployment().name, parameters('prefix'))]",
        "uniqueShort": "[if(empty(parameters('uniqueShort')), substring(variables('unique'), 0, 4), parameters('uniqueShort'))]",

        "baseUrl": "[if(not(empty(parameters('baseUrl'))), if(endsWith(parameters('baseUrl'), '/'), parameters('baseUrl'), concat(parameters('baseUrl'), '/')), if(contains(deployment().properties, 'templateLink'), uri(deployment().properties.templateLink.uri, '.'), ''))]",

        "location": "[parameters('location')]",
        "logAnalyticsLocation": "[if(empty(parameters('logAnalyticsLocation')), variables('location'), parameters('logAnalyticsLocation'))]",

        "name": {
            "storageAccount": "[variables('unique')]",
            "customer": "[parameters('customerName')]",
            "container": {
                "backup": "backup"
            },
            "network": {
                "vnet": "[if(empty(parameters('virtualNetworkName')), concat(parameters('prefix'), '-', variables('uniqueShort'), '-VNet'), parameters('virtualNetworkName'))]",
                "subnet": "[if(empty(parameters('subnetName')), concat(parameters('prefix'), '-', variables('uniqueShort'), '-Subnet'), parameters('subnetName'))]"
            },
            "appServicePlan": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-AppServicePlan')]",
            "appService": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-AppService')]",
            "sa": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-SA')]",
            "la": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-LogAnalytics')]",
            "alerting": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-Alerts')]",
            "actionGroup": "[concat(parameters('prefix'), '-', variables('uniqueShort'), '-ActionGroup')]",
            "vm": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-VM')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-VM')]"
            },
            "computer": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'))]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'))]"
            },
            "publicIPAddress": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-PublicIP')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-PublicIP')]"
            },
            "nic": {
                "customer": {
                    "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-Customer-VNet-NIC')]",
                    "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-Customer-VNet-NIC')]"
                }
            },
            "nsg": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-Customer-NSG')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-Customer-NSG')]"
            },
            "resourceGroup": "[parameters('customerResourceGroupName')]",
            "extension": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-ScriptExtension')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-ScriptExtension')]"
            },
            "laExtension": {
                "chef": "[concat(parameters('prefix'), '-chef-', variables('uniqueShort'), '-LAExtension')]",
                "automate": "[concat(parameters('prefix'), '-automate-', variables('uniqueShort'), '-LAExtension')]"                
            },
            "functions": {
                "ops": "[concat(parameters('prefix'), '-Ops-AF')]",
                "counts": "[concat(parameters('prefix'), '-Counts-AF')]",
                "chefmetrics": "[concat(parameters('prefix'), '-ChefMetrics-AF')]"
            },
            "apiConnection": "[concat(parameters('prefix'), '-AzureBlob-APIConnection')]",
            "logicApps": {
                "housekeeping": "[concat(parameters('prefix'), '-Backup-HouseKeeping-LogicApp')]"
            }
        },

        "enabled": {
            "logAnalytics": "[parameters('enableLogAnalytics')]",
            "backup": "[parameters('enableBackup')]",
            "debug": "[parameters('debug')]"
        },

        "backup": {
            "retention": "[mul(parameters('backupRetention'), -1)]",
            "cron": "[concat(parameters('backupMinute'), ' ', parameters('backupHour'), ' * * *')]"
        },

        "sslRenewal": {
            "cron": "[concat(parameters('sslRenewalMinute'), ' ', parameters('sslRenewalHour'), ' * * *')]"
        },

        "vmSize": {
            "chef": "Standard_DS2_V2",
            "automate": "Standard_DS2_V2"
        },

        "admin_username": "azureama",
        "admin": {
            "copy": [
                {
                    "name": "sshPublicKeys",
                    "count": "[length(parameters('sshPublicKeys'))]",
                    "input": {
                        "path": "[concat('/home/', variables('admin_username'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('sshPublicKeys')[copyIndex('sshPublicKeys')]]"
                    }
                }
            ]
        },

        "network": {
            "existing": "[if(empty(parameters('existingVNetFromUI')), parameters('existingVNet'), if(equals(parameters('existingVNetFromUI'), 'new'), bool(0), bool(1)))]",
            "resourceGroup": "[parameters('customerResourceGroupName')]",
            "prefix": {
                "vnet": "[parameters('vnetPrefix')]",
                "subnet": "[parameters('subnetPrefix')]"
            }
        },

        "sourceAddresses": {
            "ssh": "[parameters('sshSourceAddresses')]"
        },

        "sasTokenFromDeployment": "[if(parameters('autoDiscoverSASToken'), if(contains(deployment().properties, 'templateLink'), if(equals(length(split(deployment().properties.templateLink.uri, '?')), 2), last(split(deployment().properties.templateLink.uri, '?')), ''), ''), '')]",
        "templateUrlQueryString": "[if(empty(parameters('azureStorageSASToken')), if(empty(variables('sasTokenFromDeployment')), '', concat('?', variables('sasTokenFromDeployment'))), concat('?', parameters('azureStorageSASToken')))]",

        "urls": {
            "storageAccount": "[concat(variables('baseUrl'), 'templates/storage-account.json', variables('templateUrlQueryString'))]",
            "virtualNetwork": "[concat(variables('baseUrl'), 'templates/virtual-network.json', variables('templateUrlQueryString'))]",
            "publicIPAddress": "[concat(variables('baseUrl'), 'templates/public-ipaddress.json', variables('templateUrlQueryString'))]",
            "networkInterfacePublic": "[concat(variables('baseUrl'), 'templates/network-interface-public.json', variables('templateUrlQueryString'))]",
            "networkSecurityGroup": "[concat(variables('baseUrl'), 'templates/network-security-group.json', variables('templateUrlQueryString'))]",
            "virtualMachine": "[concat(variables('baseUrl'), 'templates/virtual-machine.json', variables('templateUrlQueryString'))]",
            "scriptExtension": "[concat(variables('baseUrl'), 'templates/script-extension.json', variables('templateUrlQueryString'))]",
            "appServicePlan": "[concat(variables('baseUrl'), 'templates/app-service-plan.json', variables('templateUrlQueryString'))]",
            "appService": "[concat(variables('baseUrl'), 'templates/app-service.json', variables('templateUrlQueryString'))]",
            "logAnalytics": "[concat(variables('baseUrl'), 'templates/log-analytics.json', variables('templateUrlQueryString'))]",
            "monitorAlerts": "[concat(variables('baseUrl'), 'templates/monitor-alerts.json', variables('templateUrlQueryString'))]",
            "logAnalyticsExtension": "[concat(variables('baseUrl'), 'templates/log-analytics-extension.json', variables('templateUrlQueryString'))]",
            "actionGroup": "[concat(variables('baseUrl'), 'templates/action-group.json', variables('templateUrlQueryString'))]",
            "apiConnection": "[concat(variables('baseUrl'), 'templates/apiConnection/azureblob.json', variables('templateUrlQueryString'))]",
            "logicApps": {
                "housekeeping": "[concat(variables('baseUrl'), 'templates/logicApps/housekeeping.json', variables('templateUrlQueryString'))]"
            },
            "scripts": {
                "chefserver": "[concat(variables('baseUrl'), 'scripts/chef-server.sh', variables('templateUrlQueryString'))]",
                "automateserver": "[concat(variables('baseUrl'), 'scripts/automate-server.sh', variables('templateUrlQueryString'))]",
                "backup": "[concat(variables('baseUrl'), 'scripts/backup.sh', variables('templateUrlQueryString'))]"
            },
            "functions": {
                "chefMetrics": "[concat(variables('baseUrl'), 'templates/functions/chef-metrics.json', variables('templateUrlQueryString'))]",
                "counts": "[concat(variables('baseUrl'), 'templates/functions/counts.json', variables('templateUrlQueryString'))]",
                "ops": "[concat(variables('baseUrl'), 'templates/functions/ops.json', variables('templateUrlQueryString'))]"
            },
            "statsd": {
                "azureStorage": "[concat(variables('baseUrl'), 'scripts/statsd-azure-queue.js', variables('templateUrlQueryString'))]"
            }
        },

        "alerting": {
            "emailAddress": "[if(empty(parameters('alertEmailAddress')), parameters('chefUserEmailaddress'), parameters('alertEmailAddress'))]",
            "actionGroupIds": "[parameters('alertActionGroups')]"
         },

        "apiVersions": {
            "deployments": "2017-05-10",
            "config": "2016-08-01"
        },

        "chef": {
            "enabled": "[parameters('chefEnabled')]",
            "version": "[parameters('chefServerVersion')]",
            "username": "[parameters('chefUsername')]",
            "email": "[parameters('chefUserEmailaddress')]",
            "gdprAgree": "[parameters('chefUserGdprAgree')]",
            "fullname": "[parameters('chefUserFullname')]",
            "password": "[parameters('chefUserPassword')]",
            "org": "[toLower(parameters('chefOrg'))]",
            "orgDescription": "[parameters('chefOrgDescription')]"
        },

        "automate": {
            "enabled": "[parameters('automateEnabled')]",
            "license": "[parameters('automateLicense')]"
        },

        "la": {
            "sku": "[parameters('logAnalyticsTier')]"
        },

        "tags": {
            "provider": "2680257b-9f22-4261-b1ef-72412d367a68"
        },

        "isManagedApp": "[not(empty(parameters('verifyURLApiKey')))]",

        "verify": {
            "url": "[parameters('verifyURL')]",
            "apiKey": "[parameters('verifyURLApiKey')]"
        },

        "custom": {
            "domain": "[parameters('customDomainName')]",
            "chef": {
                "hostname": "[parameters('customChefServerHostname')]",
                "certificate": "[parameters('customChefServerSSLCertificate')]",
                "certificateKey": "[parameters('customChefServerSSLCertificateKey')]"
            },
            "automate": {
                "hostname": "[parameters('customAutomateServerHostname')]",
                "certificate": "[parameters('customAutomateServerSSLCertificate')]",
                "certificateKey": "[parameters('customAutomateServerSSLCertificateKey')]"
            }
        }
    },
    "functions": [
        {
            "namespace": "chefSoftware",
            "members": {
                "getFQDN": {
                    "parameters": [
                        {
                            "name": "isManagedApp",
                            "type": "bool"
                        },
                        {
                            "name": "customDomainName",
                            "type": "string"
                        },
                        {
                            "name": "customHostname",
                            "type": "string"
                        },
                        {
                            "name": "hostname",
                            "type": "string"
                        },
                        {
                            "name": "fqdn",
                            "type": "string"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[if(not(empty(parameters('customDomainName'))), concat(parameters('customHostname'), '.', parameters('customDomainName')), if(parameters('isManagedApp'), concat(parameters('hostname'), '.managedautomate.io'), parameters('fqdn')))]"
                    }
                }
            }
        }
    ],
    "resources": [

        {
            "comments": "Resource to track Chef Automate installations using this template",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat('pid-', variables('tags').provider)]",
            "apiVersion": "2017-05-10",  
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": []
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').sa, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').storageAccount]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('name').storageAccount]"
                    },
                    "tags": {
                        "value": {
                            "description": "Storage account used for troubleshooting and function storage",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').apiConnection, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').apiConnection]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "name": {
                        "value": "[variables('name').apiConnection]"
                    },
                    "saName": {
                        "value": "[variables('name').storageAccount]"
                    },
                    "saKey": {
                        "value": "[reference(concat(variables('name').sa, '-Deployment')).outputs.accesskey.value]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "backupEnabled": {
                        "value": "[variables('enabled').backup]"
                    },
                    "tags": {
                        "value": {
                            "description": "API Connection to the Storage Account for Logic Apps",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').logicApps.housekeeping, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').apiConnection, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').logicApps.housekeeping]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "name": {
                        "value": "[variables('name').logicApps.housekeeping]"
                    },
                    "apiConnectionName": {
                        "value": "[variables('name').apiConnection]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "backupEnabled": {
                        "value": "[variables('enabled').backup]"
                    },
                    "retention": {
                        "value": "[variables('backup').retention]"
                    },
                    "tags": {
                        "value": {
                            "description": "API Connection to the Storage Account for Logic Apps",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },        

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').appServicePlan, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').appServicePlan]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "name": {
                        "value": "[variables('name').appServicePlan]"
                    },
                    "tags": {
                        "value": {
                            "description": "Service plan to host functions for setup and logging",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').appService, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').appServicePlan, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').appService]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "name": {
                        "value": "[variables('name').appService]"
                    },
                    "tags": {
                        "value": {
                            "description": "Website app service to store the various functions required for the Chef Managed App",
                            "provider": "[variables('tags').provider]"
                        }
                    },
                    "servicePlanId": {
                        "value": "[reference(concat(variables('name').appServicePlan, '-Deployment')).outputs.id.value]"
                    },
                    "storageAccountName": {
                        "value": "[variables('name').storageAccount]"
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').functions.ops, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').appService, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').functions.ops]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "siteName": {
                        "value": "[variables('name').appService]"
                    },
                    "logAnalyticsWorkspaceId": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.workspaceId.value]"
                    },
                    "logAnalyticsSharedKey": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.key.value]"
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    },
                    "customerName": {
                        "value": "[variables('name').customer]"
                    }
                }
            }
        },        

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').functions.counts, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').appService, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').functions.counts]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "siteName": {
                        "value": "[variables('name').appService]"
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').functions.chefmetrics, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').appService, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').functions.chefMetrics]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "siteName": {
                        "value": "[variables('name').appService]"
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').la, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').logAnalytics]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceName": {
                        "value": "[variables('name').la]"
                    },
                    "sku": {
                        "value": "[variables('la').sku]"
                    },
                    "location": {
                        "value": "[variables('logAnalyticsLocation')]"
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    },
                    "tags": {
                        "value": {
                            "description": "Log Analytics workspace to capture information about the health of the Chef Automate Managed App",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').actionGroup, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('enabled').logAnalytics]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').actionGroup]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "name": {
                        "value": "[variables('name').actionGroup]"
                    },
                    "emailAddress": {
                        "value": "[variables('alerting').emailAddress]"
                    },
                    "actionGroupIds": {
                        "value": "[variables('alerting').actionGroupIds]"
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').alerting, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').actionGroup, '-Deployment')]"
            ],
            "condition": "[variables('enabled').logAnalytics]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').monitorAlerts]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceRef": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.ref.value]"
                    },
                    "actionGroup": {
                        "value": "[reference(concat(variables('name').actionGroup, '-Deployment')).outputs.id.value]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "deployCode": {
                        "value": "[variables('uniqueShort')]"
                    }
                }
            }
        },

        {
            "comments": "Virtual Network resource to either create a network or return the details of an existing on",
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').network.vnet, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').virtualNetwork]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "resourceGroup": {
                        "value": "[variables('network').resourceGroup]"
                    },
                    "vnetName": {
                        "value": "[variables('name').network.vnet]"
                    },
                    "subnetName": {
                        "value": "[variables('name').network.subnet]"
                    },
                    "vnetPrefix": {
                        "value": "[variables('network').prefix.vnet]"
                    },
                    "subnetPrefix": {
                        "value": "[variables('network').prefix.subnet]"
                    },
                    "existingVnet": {
                        "value": "[variables('network').existing]"
                    },
                    "tags": {
                        "value": {
                            "description": "Log Analytics workspace to capture information about the health of the Chef Automate Managed App",
                            "provider": "[variables('tags').provider]"
                        }                        
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').nsg.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('chef').enabled]",
            "properties": {
                "mode":"Incremental",
                "templateLink": {
                    "uri": "[variables('urls').networkSecurityGroup]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "groupName": {
                        "value": "[variables('name').nsg.chef]"
                    },
                    "sshSourceAddresses": {
                        "value": "[variables('sourceAddresses').ssh]"
                    },
                    "tags": {
                        "value": {
                            "description": "network security group limiting access to the Chef server",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').nsg.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode":"Incremental",
                "templateLink": {
                    "uri": "[variables('urls').networkSecurityGroup]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "groupName": {
                        "value": "[variables('name').nsg.automate]"
                    },
                    "sshSourceAddresses": {
                        "value": "[variables('sourceAddresses').ssh]"
                    },
                    "tags": {
                        "value": {
                            "description": "network security group limiting access to the Automate server",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').publicIPAddress.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('chef').enabled]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').publicIPAddress]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "publicIPAddressName": {
                        "value": "[variables('name').publicIPAddress.chef]"
                    },
                    "publicIPAddressType": {
                        "value": "Dynamic"
                    },
                    "dnsLabelPrefix": {
                        "value": "[variables('name').computer.chef]"
                    },
                    "tags": {
                        "value": {
                            "description": "Public IP address for the Chef server",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').publicIPAddress.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').publicIPAddress]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "publicIPAddressName": {
                        "value": "[variables('name').publicIPAddress.automate]"
                    },
                    "publicIPAddressType": {
                        "value": "Dynamic"
                    },
                    "dnsLabelPrefix": {
                        "value": "[variables('name').computer.automate]"
                    },
                    "tags": {
                        "value": {
                            "description": "Public IP address for the Automate server",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },
        
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').nic.customer.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('chef').enabled]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').publicIPAddress.chef, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').nsg.chef, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').networkInterfacePublic]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "nicName": {
                        "value": "[variables('name').nic.customer.chef]"
                    },
                    "publicIPAddressRef": {
                        "value": "[reference(concat(variables('name').publicIPAddress.chef, '-Deployment')).outputs.publicIpId.value]"
                    },
                    "subnetRef": {
                        "value": "[reference(concat(variables('name').network.vnet, '-Deployment')).outputs.subnetRef.value]"
                    },
                    "nsgRef": {
                        "value": "[reference(concat(variables('name').nsg.chef, '-Deployment')).outputs.nsgId.value]"
                    },
                    "tags": {
                        "value": {
                            "description": "Network card for the Chef server connected to the customer subnet",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },
        
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').nic.customer.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').publicIPAddress.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').nsg.automate, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').networkInterfacePublic]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "nicName": {
                        "value": "[variables('name').nic.customer.automate]"
                    },
                    "publicIPAddressRef": {
                        "value": "[reference(concat(variables('name').publicIPAddress.automate, '-Deployment')).outputs.publicIpId.value]"
                    },
                    "subnetRef": {
                        "value": "[reference(concat(variables('name').network.vnet, '-Deployment')).outputs.subnetRef.value]"
                    },
                    "nsgRef": {
                        "value": "[reference(concat(variables('name').nsg.automate, '-Deployment')).outputs.nsgId.value]"
                    },
                    "tags": {
                        "value": {
                            "description": "Network card for the Automate server connected to the customer subnet",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').vm.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('chef').enabled]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').nic.customer.chef, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').virtualMachine]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmName": {
                        "value": "[variables('name').vm.chef]"
                    },
                    "vmSize": {
                        "value": "[variables('vmSize').chef]"
                    },
                    "adminUsername": {
                        "value": "[variables('admin_username')]"
                    },
                    "sshPublicKeys": {
                        "value": "[variables('admin').sshPublicKeys]"
                    },
                    "authenticationType": {
                        "value": "sshPublicKey"
                    },
                    "storageAccountName": {
                        "value": "[variables('name').storageAccount]"
                    },
                    "customerNicRef": {
                        "value": "[reference(concat(variables('name').nic.customer.chef, '-Deployment')).outputs.ref.value]"
                    },
                    "fqdn": {
                        "value": "[chefSoftware.getFQDN(variables('isManagedApp'), variables('custom').domain, variables('custom').chef.hostname, variables('name').computer.chef, reference(concat(variables('name').publicIPAddress.chef, '-Deployment')).outputs.fqdn.value)]"
                    },
                    "tags": {
                        "value": {
                            "description": "Chef Server Virtual Machine",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').vm.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').nic.customer.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').sa, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').virtualMachine]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmName": {
                        "value": "[variables('name').vm.automate]"
                    },
                    "vmSize": {
                        "value": "[variables('vmSize').automate]"
                    },
                    "adminUsername": {
                        "value": "[variables('admin_username')]"
                    },
                    "sshPublicKeys": {
                        "value": "[variables('admin').sshPublicKeys]"
                    },
                    "authenticationType": {
                        "value": "sshPublicKey"
                    },
                    "storageAccountName": {
                        "value": "[variables('name').storageAccount]"
                    },
                    "customerNicRef": {
                        "value": "[reference(concat(variables('name').nic.customer.automate, '-Deployment')).outputs.ref.value]"
                    },
                    "fqdn": {
                        "value": "[chefSoftware.getFQDN(variables('isManagedApp'), variables('custom').domain, variables('custom').automate.hostname, variables('name').computer.automate, reference(concat(variables('name').publicIPAddress.automate, '-Deployment')).outputs.fqdn.value)]"
                    },
                    "tags": {
                        "value": {
                            "description": "Automate Server Virtual Machine",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').laExtension.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').vm.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').logAnalyticsExtension]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceId": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.workspaceId.value]"
                    },
                    "workspaceKey": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.key.value]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmname": {
                        "value": "[variables('name').vm.automate]"
                    },
                    "extensionName": {
                        "value": "MonitorAutomateServer"
                    },
                    "tags": {
                        "value": {
                            "description": "Script to install and configure the Automate server",
                            "provider": "[variables('tags').provider]"
                        }
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').laExtension.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('chef').enabled]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').vm.chef, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').logAnalyticsExtension]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "workspaceId": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.workspaceId.value]"
                    },
                    "workspaceKey": {
                        "value": "[reference(concat(variables('name').la, '-Deployment')).outputs.key.value]"
                    },
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmname": {
                        "value": "[variables('name').vm.chef]"
                    },
                    "extensionName": {
                        "value": "MonitorChefServer"
                    },
                    "tags": {
                        "value": {
                            "description": "Log Analytics monitoring extension for Chef Server",
                            "provider": "[variables('tags').provider]"
                        }
                    },
                    "logAnalyticsEnabled": {
                        "value": "[variables('enabled').logAnalytics]"
                    }
                }
            }
        },        
        
        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').extension.automate, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').vm.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').functions.ops, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').laExtension.automate, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').scriptExtension]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmname": {
                        "value": "[variables('name').vm.automate]"
                    },
                    "scriptUrl": {
                        "value": "[variables('urls').scripts.automateserver]"
                    },
                    "scriptName": {
                        "value": "automate-server.sh"
                    },
                    "arguments": {
                        "value": {
                            "MODE": "[concat('datadisks,install,kernel,config,deploy,license,token,cron', if(variables('isManagedApp'), ',dns', ''), ',certificate', if(variables('enabled').backup, ',backup', ''), if(variables('enabled').logAnalytics, ',centrallogging', ''), ',internalip')]",
                            "USERNAME": "[variables('chef').username]",
                            "PASSWORD": "[variables('chef').password]",
                            "EMAILADDRESS": "[variables('chef').email]",
                            "FULLNAME": "[variables('chef').fullname]",
                            "GDPR_AGREE": "[variables('chef').gdprAgree]",
                            "AUTOMATE_LICENSE": "[variables('automate').license]",
                            "FUNCTION_BASE_URL": "[reference(concat(variables('name').appService, '-Deployment')).outputs.baseUrl.value]",
                            "OPS_FUNCTION_APIKEY": "[reference(concat(variables('name').functions.ops, '-Deployment')).outputs.apiKey.value]",
                            "AUTOMATE_SERVER_FQDN": "[concat(reference(concat(variables('name').vm.automate, '-Deployment')).outputs.fqdn.value)]",
                            "BACKUP_SCRIPT_URL": "[variables('urls').scripts.backup]",
                            "SA_NAME": "[variables('name').storageAccount]",
                            "SA_CONTAINER_NAME": "[variables('name').container.backup]",
                            "SA_KEY": "[reference(concat(variables('name').sa, '-Deployment')).outputs.accesskey.value]",
                            "BACKUP_CRON": "[variables('backup').cron]",
                            "SUBSCRIPTION_ID": "[subscription().subscriptionId]",
                            "VERIFY_URL": "[variables('verify').url]",
                            "VERIFY_API_KEY": "[variables('verify').apiKey]",
                            "CUSTOM_DOMAIN_NAME": "[variables('custom').domain]",
                            "CHEF_SERVER_FQDN": "[concat(reference(concat(variables('name').vm.chef, '-Deployment')).outputs.fqdn.value)]",
                            "PIP_CHEF_SERVER_FQDN": "[reference(concat(variables('name').publicIPAddress.chef, '-Deployment')).outputs.fqdn.value]",
                            "PIP_AUTOMATE_SERVER_FQDN": "[reference(concat(variables('name').publicIPAddress.automate, '-Deployment')).outputs.fqdn.value]",
                            "MANAGED_APP": "[variables('isManagedApp')]",
                            "SSL_CERTIFICATE": "[base64ToString(variables('custom').automate.certificate)]",
                            "SSL_CERTIFICATE_KEY": "[base64ToString(variables('custom').automate.certificateKey)]",
                            "CERT_RENEW_CRON": "[variables('sslRenewal').cron]",
                            "DATA_DISK_COUNT": "[concat(reference(concat(variables('name').vm.automate, '-Deployment')).outputs.dataDiskCount.value)]"
                        }
                    },
                    "extensionName": {
                        "value": "InstallAndConfigureAutomate"
                    },
                    "tags": {
                        "value": {
                            "description": "Script to install and configure the Automate server",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        },

        {
            "type": "Microsoft.Resources/deployments",
            "name": "[concat(variables('name').extension.chef, '-Deployment')]",
            "apiVersion": "[variables('apiVersions').deployments]",
            "condition": "[variables('chef').enabled]",
            "dependsOn": [
                "[concat('Microsoft.Resources/deployments/', variables('name').vm.chef, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').extension.automate, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').functions.ops, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').la, '-Deployment')]",
                "[concat('Microsoft.Resources/deployments/', variables('name').laExtension.chef, '-Deployment')]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('urls').scriptExtension]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmname": {
                        "value": "[variables('name').vm.chef]"
                    },
                    "scriptUrl": {
                        "value": "[variables('urls').scripts.chefserver]"
                    },
                    "scriptName": {
                        "value": "chef-server.sh"
                    },
                    "arguments":{
                        "value": {
                            "MODE": "[concat('datadisks,install,config,storekeys,integrate,', if(variables('enabled').logAnalytics, 'metrics,', ''), 'reconfigure,internalip', if(variables('enabled').backup, ',backup', ''), ',certificate')]",
                            "CHEF_SERVER_VERSION": "[variables('chef').version]",
                            "CHEF_USER_NAME": "[variables('chef').username]",
                            "CHEF_USER_FULLNAME": "[variables('chef').fullname]",
                            "CHEF_USER_PASSWORD": "[variables('chef').password]",
                            "CHEF_USER_EMAILADDRESS": "[variables('chef').email]",
                            "CHEF_USER_GDPR_AGREE": "[variables('chef').gdprAgree]",
                            "CHEF_ORGNAME": "[variables('chef').org]",
                            "CHEF_ORG_DESCRIPTION": "[variables('chef').orgDescription]",
                            "FUNCTION_BASE_URL": "[reference(concat(variables('name').appService, '-Deployment')).outputs.baseUrl.value]",
                            "OPS_FUNCTION_APIKEY": "[reference(concat(variables('name').functions.ops, '-Deployment')).outputs.apiKey.value]",
                            "AUTOMATE_SERVER_FQDN": "[concat(reference(concat(variables('name').vm.automate, '-Deployment')).outputs.fqdn.value)]",
                            "CHEF_SERVER_FQDN": "[concat(reference(concat(variables('name').vm.chef, '-Deployment')).outputs.fqdn.value)]",
                            "BACKUP_SCRIPT_URL": "[variables('urls').scripts.backup]",
                            "BACKUP_CRON": "[variables('backup').cron]",
                            "SA_NAME": "[variables('name').storageAccount]",
                            "SA_CONTAINER_NAME": "[variables('name').container.backup]",
                            "SA_KEY": "[reference(concat(variables('name').sa, '-Deployment')).outputs.accesskey.value]",
                            "STATSD_BACKEND_SCRIPT_URL": "[variables('urls').statsd.azureStorage]",
                            "PIP_CHEF_SERVER_FQDN": "[reference(concat(variables('name').publicIPAddress.chef, '-Deployment')).outputs.fqdn.value]",
                            "MANAGED_APP": "[variables('isManagedApp')]",
                            "CUSTOM_DOMAIN_NAME": "[variables('custom').domain]",
                            "SSL_CERTIFICATE": "[base64ToString(variables('custom').chef.certificate)]",
                            "SSL_CERTIFICATE_KEY": "[base64ToString(variables('custom').chef.certificateKey)]",
                            "CERT_RENEW_CRON": "[variables('sslRenewal').cron]",
                            "DATA_DISK_COUNT": "[concat(reference(concat(variables('name').vm.chef, '-Deployment')).outputs.dataDiskCount.value)]"
                        }
                    },
                    "extensionName": {
                        "value": "InstallAndConfigureChef"
                    },
                    "tags": {
                        "value": {
                            "description": "Script to install and configure the Chef server",
                            "provider": "[variables('tags').provider]"
                        }
                    }
                }
            }
        }
    ],
    "outputs": {
        "automateServerFQDN": {
            "type": "string",
            "value": "[concat(reference(concat(variables('name').vm.automate, '-Deployment')).outputs.fqdn.value)]"
        },
        "chefServerFQDN": {
            "type": "string",
            "value": "[if(variables('chef').enabled, concat(reference(concat(variables('name').vm.chef, '-Deployment')).outputs.fqdn.value), '')]"
        },
        "starterKitDownloadUrl": {
            "type": "string",
            "value": "[concat(reference(concat(variables('name').appService, '-Deployment')).outputs.baseUrl.value, '/starterKit?code=', reference(concat(variables('name').functions.ops, '-Deployment')).outputs.apiKey.value)]"
        },
        "configStoreFunctionApiKey": {
            "type": "string",
            "value": "[reference(concat(variables('name').functions.ops, '-Deployment')).outputs.apiKey.value]"
        },
        "starterKitFunctionApiKey": {
            "type": "string",
            "value": "[reference(concat(variables('name').functions.ops, '-Deployment')).outputs.apiKey.value]"
        },        
        "uniqueShort": {
            "type": "string",
            "value": "[variables('uniqueShort')]"
        },
        "setupCommandAutomate": {
            "type": "string",
            "value": "[if(variables('enabled').debug, reference(concat(variables('name').extension.automate, '-Deployment')).outputs.executedCommand.value, '')]"
        },
        "setupCommandChef": {
            "type": "string",
            "value": "[if(variables('enabled').debug, reference(concat(variables('name').extension.chef, '-Deployment')).outputs.executedCommand.value, '')]"
        }
    }
}
